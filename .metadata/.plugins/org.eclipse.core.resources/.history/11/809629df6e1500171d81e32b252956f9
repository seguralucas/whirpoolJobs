package exit.services.principal.peticiones;

import java.io.BufferedReader;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import exit.services.singletons.RecuperadorMapeoCsv;
import exit.services.singletons.RecuperadorPropiedadedConfiguracionEntidad;


	
public class GetOrdenesVTEX extends GetAbstractoGenerico{
	
	private String[] getArrayTipos(String accesoAlJson){
		String datos[]=accesoAlJson.split("\\.");
		String[] tipoDatos= new String[datos.length];
		for(int i=0;i<datos.length;i++){
			String dato=datos[i];
			String[] partes=dato.split("\\[");
			if(partes.length>1){
			   	tipoDatos[i]="JSONArray";
			}
			else
			   	tipoDatos[i]="JSONObject";
		}
		return tipoDatos;
	}
	
	private boolean isJsonObject(String valor){
		return valor.equalsIgnoreCase("JSONObject");
	}
	
	private Object getObjectJSONObject(Object json, String key){
		return ((JSONObject)json).get(key);
	}
	
	private Object getObjectJSONArray(Object jsonArr, String datos){
		String[] datosPartidos=datos.split("\\[");
		Integer indice=Integer.parseInt(datosPartidos[1].substring(0, datosPartidos[1].length()-1));
		return ((JSONArray)jsonArr).get(indice);	
	}
	
	private Object getValue(String accesoAlJson, String[] tiposDatos, JSONObject json){
		String datos[]=accesoAlJson.split("\\.");
		Object posicionActual=json;
		Object resultado;
		for(int i=0;i<tiposDatos.length-1;i++){
			int siguiente=i+1;
			if(isJsonObject(tiposDatos[i]))/*Es jsonObject*/
					posicionActual=getObjectJSONObject(posicionActual,datos[i]);
			else/*Es un array*/
				posicionActual=getObjectJSONArray(posicionActual,datos[i]);
			}
		if(isJsonObject(tiposDatos[tiposDatos.length-1])){
			resultado=((JSONObject)posicionActual).get(datos[tiposDatos.length-1]);
		}
		else{/*Es un array*/
			String[] datosPartidos=datos[i].split("\\[");
			Integer indice=Integer.parseInt(datosPartidos[1].substring(0, datosPartidos[1].length()-1));
			posicionActual=((JSONArray)posicionActual).get(indice);
			}				
		}

	@Override
	Object procesarPeticionOK(BufferedReader in, String id, int responseCode) throws Exception {
		JSONObject jsonObject = ConvertidorJson.convertir(in);
		String[] buscar=RecuperadorMapeoCsv.getInstancia().getCuerpo().split(RecuperadorPropiedadedConfiguracionEntidad.getInstance().getSeparadorCSVREGEX());
		String[] arrayTipos=getArrayTipos(buscar[0]);
		
		System.out.println((String)jsonObject.get("sequence"));
		
		return null;
	}

	@Override
	Object procesarPeticionError(BufferedReader in, String id, int responseCode) throws Exception {

		return null;
	}

	@Override
	Object procesarPeticionOK(BufferedReader in, int responseCode) throws Exception {
		JSONObject jsonObject = ConvertidorJson.convertir(in);
		JSONArray jsonArrayItems= (JSONArray) jsonObject.get(("list"));
		ExecutorService workers = Executors.newFixedThreadPool(RecuperadorPropiedadedConfiguracionEntidad.getInstance().getNivelParalelismo());      	
	    List<Callable<Void>> tasks = new ArrayList<>();
		System.out.println("Subiendo el paralelismo a "+RecuperadorPropiedadedConfiguracionEntidad.getInstance().getNivelParalelismo());
		for(int i=0;i<jsonArrayItems.size();i++){
			final Integer j=i;
			final GetOrdenesVTEX getOrdenes= this;
			tasks.add(new Callable<Void>() {
		        public Void call() {
    		JSONObject jsonItem=(JSONObject)jsonArrayItems.get(j);
			String id=(String)jsonItem.get("orderId");
			getOrdenes.realizarPeticion(RecuperadorPropiedadedConfiguracionEntidad.getInstance().getUrl(), id);
			return null;
		        }
			});
		}
		System.out.println(jsonArrayItems.size());
	    workers.invokeAll(tasks);
	    workers.shutdown();
		return jsonArrayItems.size(); //Devuelve la cantidad de registros encontradas
		}

	@Override
	Object procesarPeticionError(BufferedReader in, int responseCode) throws Exception {

		return null;
	}

}
